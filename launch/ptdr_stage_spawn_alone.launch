<?xml version="1.0"?>
<launch>

    <!-- ================================== -->
    <!-- ============ Variables =========== -->
    <!-- ================================== -->

    <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>

    <!-- arg name="map_file" default="$(find ptdr_stage)/maps/map.yaml"/ -->

    <!-- arg name="world_file" default="$(find ptdr_stage)/worlds/search_and_rescue_world.world"/ -->

    <arg name="namespace_0"  default="robot_0"/>
    <arg name="namespace_1"  default="robot_1"/>
    <arg name="namespace_2"  default="robot_2"/>
    
    <arg name="namespace_0_x_pos" default="2.0"/>
    <arg name="namespace_0_y_pos" default="2.0"/>
    <arg name="namespace_0_z_pos" default="0.0"/>
    <arg name="namespace_0_yaw" default="0.0"/>

    <arg name="namespace_1_x_pos" default="1.0"/>
    <arg name="namespace_1_y_pos" default="1.0"/>
    <arg name="namespace_1_z_pos" default="0.0"/>
    <arg name="namespace_1_yaw" default="0.0"/>

    <arg name="namespace_2_x_pos" default="2.0"/>
    <arg name="namespace_2_y_pos" default="2.0"/>
    <arg name="namespace_2_z_pos" default="0.0"/>
    <arg name="namespace_2_yaw" default="0.0"/>

    <arg name="base"       default="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba, kobuki-->
    <arg name="stacks"     default="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
    <arg name="3d_sensor"  default="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

    <arg name="map_file"       default="$(env TURTLEBOT_STAGE_MAP_FILE)"/> <!-- robopark_plan $(find ptdr_stage)/maps/map.yaml -->
    <arg name="world_file"     default=" $(env TURTLEBOT_STAGE_WORLD_FILE)"/>

    <!--    
    <arg name="initial_pose_x" default="2.0"/>
    <arg name="initial_pose_y" default="2.0"/>
    <arg name="initial_pose_a" default="0.0"/>
    -->

    <!-- ================================== -->
    <!-- ============== Stage ============= -->
    <!-- ================================== -->

    <param name="/use_sim_time" value="true" />

    <node pkg="stage_ros" type="stageros" name="stageros" args="$(arg world_file)">
        <param name="base_watchdog_timeout" value="0.5"/>
        <remap from="odom" to="odom"/>
        <remap from="base_pose_ground_truth" to="base_pose_ground_truth"/>
        <remap from="cmd_vel" to="mobile_base/commands/velocity"/>
        <remap from="base_scan" to="scan"/>
    </node>

      <!--  ***************** Robot Model *****************  -->
      <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
        <arg name="base" value="$(arg base)" />
        <arg name="stacks" value="$(arg stacks)" />
        <arg name="3d_sensor" value="$(arg 3d_sensor)" />
      </include>
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="false"/>
      </node>

      <!-- Command Velocity multiplexer -->
      <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
      <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
        <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml"/>
        <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
      </node>

      <!--  ************** Navigation  ***************  -->
      <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>

      <!--  ****** Maps *****  -->
      <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
        <param name="frame_id" value="/map"/>
      </node>

      <include file="$(find turtlebot_navigation)/launch/includes/amcl/amcl.launch.xml">
        <arg name="scan_topic" value="scan"/>
        <arg name="use_map_topic" value="true"/>
        <arg name="initial_pose_x" value="$(arg namespace_0_x_pos)"/>
        <arg name="initial_pose_y" value="$(arg namespace_0_y_pos)"/>
        <arg name="initial_pose_a" value="$(arg namespace_0_yaw)"/>
      </include>


      <!--

      <node name="map_server_gmapping" pkg="map_server" type="map_server" args="$(arg map_file)">
        <param name="frame_id" value="/map_gmapping"/>
      </node>
      <node pkg="gmapping" type="slam_gmapping" name="gmapping_thing" output="screen" >
          <param name="map_frame" value="map_gmapping"/>
          <param name="scan" value="/scan"/>
          <param name="odom_frame" value="/odom"/>
          <param name="base_frame" value="/base_link"/>
          <param name="map_update_interval" value="0.1" />
          <param name="temporalUpdate" value="1" />
          <param name="xmin" value="0" />
          <param name="xmax" value="10" />
          <param name="ymin" value="0" />
          <param name="ymax" value="10" />
      </node>
      -->

    <!-- ================================== -->
    <!-- ============== Rviz ============== -->
    <!-- ================================== -->

    <node pkg="rviz" type="rviz" name="rviz" required="true" args="-d $(find ptdr_stage)/config/rviz_stage.rviz"/>

</launch>