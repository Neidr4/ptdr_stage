<?xml version="1.0"?>
<launch>

  <arg name="robot_namespace"/>
  <arg name="init_x_pos" default="0.0"/>
  <arg name="init_y_pos" default="0.0"/>
  <arg name="init_z_pos" default="0.0"/>
  <arg name="init_yaw"   default="0.0"/>

  <arg name="base"       default="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
  <arg name="stacks"     default="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  default="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <arg name="map_file"          default="$(find ptdr_stage)/maps/manual_record_200.yaml"/>
  <arg name="map_file_empty"    default="$(find ptdr_stage)/maps/map_empty_05_res.yaml"/>


  <!-- ================================== -->
  <!-- =========== Robot model ========== -->
  <!-- ================================== -->
  
  <group ns="$(arg robot_namespace)">

    <!-- ================================== -->
    <!-- =============== Map ============== -->
    <!-- ================================== -->
<!-- 
    <node pkg="tf" type="static_transform_publisher" name="map_to_$(arg robot_namespace)_map_tf_broadcaster" args="-$(arg init_x_pos) -$(arg init_y_pos) 0 $(arg init_yaw) 0 0 /world $(arg robot_namespace)/map 100"/> -->

    <node pkg="tf" type="static_transform_publisher" name="map_to_$(arg robot_namespace)_map_tf_broadcaster" args="0 0 0 0 0 0 /world $(arg robot_namespace)/map 100"/>

    <node name="map_server_$(arg robot_namespace)" pkg="map_server" type="map_server" args="$(arg map_file)">
      <param name="frame_id" value="map"/>
    </node>
  
<!-- 
    <arg name="scan_topic"  value="base_scan" />
    <arg name="base_frame"  value="$(arg robot_namespace)/base_footprint"/>
    <arg name="odom_frame"  value="odom"/>
    <arg name="map_frame"  value="map"/>

    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">

      <param name="base_frame" value="$(arg base_frame)"/>
      <param name="odom_frame" value="$(arg odom_frame)"/>
      <param name="map_frame" value="$(arg map_frame)"/>

      <param name="xmin" value="-20.0"/>
      <param name="ymin" value="-20.0"/>
      <param name="xmax" value="20.0"/>
      <param name="ymax" value="20.0"/>

      <param name="maxUrange" value="11.0"/>
      <param name="maxRange" value="13.0"/>

      <param name="minimumScore" value="0.05"/>

      <param name="particles" value="100"/>

      <param name="ogain" value="10.0"/>

      
      <param name="map_update_interval" value="0.5"/>
      
      <param name="sigma" value="0.05"/>
      <param name="kernelSize" value="1"/>
      <param name="lstep" value="0.05"/>
      <param name="astep" value="0.05"/>
      <param name="iterations" value="5"/>
      <param name="lsigma" value="0.075"/>
      
      <param name="lskip" value="10"/>
      <param name="minimumScore" value="90.0"/>
      <param name="srr" value="0.01"/>
      <param name="srt" value="0.02"/>
      <param name="str" value="0.01"/>
      <param name="stt" value="0.02"/>
      <param name="linearUpdate" value="0.5"/>
      <param name="angularUpdate" value="0.436"/>
      <param name="temporalUpdate" value="1"/>
      <param name="resampleThreshold" value="0.5"/>
      
       

      <param name="delta" value="0.05"/>
      <param name="llsamplerange" value="0.01"/>
      <param name="llsamplestep" value="0.01"/>
      <param name="lasamplerange" value="0.005"/>
      <param name="lasamplestep" value="0.005"/>
     

      <remap from="scan" to="base_scan"/>
    </node>

    <group ns="/map_merge">
        <param name="init_pose_x"     value="$(arg init_x_pos)"/>
        <param name="init_pose_y"     value="$(arg init_y_pos)"/>
        <param name="init_pose_z"     value="$(arg init_z_pos)"/>
        <param name="init_pose_yaw"   value="$(arg init_yaw)"  />
    </group>
 -->
    <!-- ================================== -->
    <!-- =========== Robot bring ========== -->
    <!-- ================================== -->

    <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
      <arg name="base" value="$(arg base)" />
      <arg name="stacks" value="$(arg stacks)" />
      <arg name="3d_sensor" value="$(arg 3d_sensor)" />
    </include>
    
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="use_gui" value="false"/>
    </node>


    <!-- ================================== -->
    <!-- ============ Navigation ========== -->
    <!-- ================================== -->
  
    <param name="tf_prefix" value="$(arg robot_namespace)" />
  
  
    <!-- ================================== -->
    <!-- ============== amcl ============== -->
    <!-- ================================== -->

    <arg name="urdf_file" default="$(find xacro)/xacro.py --inorder '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
    <param name="robot_description" command="$(arg urdf_file)" />

    <!-- working version with the true as root/map as map topic -->
    <param name="amcl/initial_pose_x" value="$(arg init_x_pos)" />
    <param name="amcl/initial_pose_y" value="$(arg init_y_pos)" />
    <param name="amcl/initial_pose_a" value="$(arg init_yaw)" />

    <!--
    <include file="$(find multi_robot_stage)/launch/includes/amcl_multirobot.launch.xml">
      <arg name="use_map_topic"   value="true"/>
      <arg name="global_frame_id" value="map_merged"/>
      <arg name="odom_frame_id"   value="$(arg robot_namespace)/odom"/>
      <arg name="base_frame_id"   value="$(arg robot_namespace)/base_footprint"/>
      <arg name="scan_topic"      value="base_scan"/>
    </include>
    -->

    <node pkg="amcl" type="amcl" name="amcl" output="screen">
      <param name="use_map_topic"             value="true"/>
      <!-- Publish scans from best pose at a max of 10 Hz -->
      <param name="odom_model_type"           value="diff"/>
      <param name="odom_frame_id"             value="/$(arg robot_namespace)/odom"/> 
      <param name="base_frame_id"             value="$(arg robot_namespace)/base_footprint"/> 
      <param name="global_frame_id"           value="/map_merged"/>
      <param name="resample_interval"         value="1"/>

      <remap from="scan"                      to="base_scan"/>
      <remap from="static_map"                to="/static_map" />
      <remap from="map"                       to="/map" />
    </node>
<!-- 
    <node name="robot_pose_publisher_$(arg robot_namespace)" pkg="robot_pose_publisher" type="robot_pose_publisher" output="screen">      
      <param name="base_frame"             value="$(arg robot_namespace)/base_footprint"/> 
    </node>
 -->

  </group>

  

  <group ns="$(arg robot_namespace)">

  <!-- ================================== -->
  <!-- ============ Move_base =========== -->
  <!-- ================================== -->

  <!--

  <arg name="odom_frame_id"   default="$(arg robot_namespace)/odom"/>
  <arg name="base_frame_id"   default="$(arg robot_namespace)/base_footprint"/>
  <arg name="global_frame_id" default="$(arg robot_namespace)/map"/>
  <arg name="odom_topic" default="$(arg robot_namespace)/odom" />
  <arg name="laser_topic" default="$(arg robot_namespace)/base_scan" />
  <arg name="custom_param_file" default="$(find turtlebot_navigation)/param/dummy.yaml"/>

  -->

  <arg name="odom_frame_id"   default="odom"/>
  <arg name="base_frame_id"   default="base_footprint"/>
  <arg name="global_frame_id" default="map"/>
  <arg name="odom_topic" default="odom" />
  <arg name="laser_topic" default="base_scan" />
  <arg name="custom_param_file" default="$(find turtlebot_navigation)/param/dummy.yaml"/>


    <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
      <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />   
      <rosparam file="$(find turtlebot_navigation)/param/local_costmap_params.yaml" command="load" />   
      <rosparam file="$(find turtlebot_navigation)/param/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/dwa_local_planner_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/move_base_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/global_planner_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/navfn_global_planner_params.yaml" command="load" />
      <!-- external params file that could be loaded into the move_base namespace -->
      <rosparam file="$(arg custom_param_file)" command="load" />
      
      <!-- reset frame_id parameters using user input data -->
      <param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
      <param name="global_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
      <param name="local_costmap/global_frame" value="$(arg odom_frame_id)"/>
      <param name="local_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
      <param name="DWAPlannerROS/global_frame_id" value="$(arg odom_frame_id)"/>

      <!-- remap from="cmd_vel" to="navigation_velocity_smoother/raw_cmd_vel"/ -->
      <remap from="odom" to="$(arg odom_topic)"/>
      <remap from="scan" to="$(arg laser_topic)"/>
    </node>

  </group>

</launch>