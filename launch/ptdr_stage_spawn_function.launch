<?xml version="1.0"?>
<launch>
    <!-- ================================== -->
    <!-- ============ Variables =========== -->
    <!-- ================================== -->

    

    <arg name="robot_namespace"/>
    <arg name="init_x_pos" default="0.0"/>
    <arg name="init_y_pos" default="0.0"/>
    <arg name="init_z_pos" default="0.0"/>
    <arg name="init_yaw" default="0.0"/>

    <arg name="base" default="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
    <arg name="stacks"     default="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
    <arg name="3d_sensor"  default="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

    <arg name="map_file"       default="$(find ptdr_stage)/maps/maze.yaml"/>

    

    <!-- arg name="map_file" default="$(find ptdr_stage)/maps/map_empty.yaml"/ -->

    <!-- ================================== -->
    <!-- ============ Function =========== -->
    <!-- ================================== -->
  
    <group ns="$(arg robot_namespace)">

        <arg name="urdf_file" default="$(find xacro)/xacro.py --inorder '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
        <param name="$(arg robot_namespace)/robot_description" command="$(arg urdf_file)" />

        <!-- ================================== -->
        <!-- =========== Stage spawn ========= -->
        <!-- ================================== -->

        <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
            <arg name="base" value="$(arg base)" />
            <arg name="stacks" value="$(arg stacks)" />
            <arg name="3d_sensor" value="$(arg 3d_sensor)" />
        </include>

        <!-- ================================== -->
        <!-- ========== TF with prefix ======== -->
        <!-- ================================== -->

        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <param name="use_gui" value="false"/>
            <!-- param name="tf_prefix" value="$(arg robot_namespace)"/-->
        </node>

        <!-- Command Velocity multiplexer -->
      <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
      <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
        <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml"/>
        <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
      </node>

      <!--  ************** Navigation  ***************  -->
      <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>

      <!--  ****** Maps *****  -->
      <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
        <param name="frame_id" value="/map"/>
      </node>

      <include file="$(find turtlebot_navigation)/launch/includes/amcl/amcl.launch.xml">
        <arg name="scan_topic" value="scan"/>
        <arg name="use_map_topic" value="true"/>
        <arg name="initial_pose_x" value="$(arg init_x_pos)"/>
        <arg name="initial_pose_y" value="$(arg init_y_pos)"/>
        <arg name="initial_pose_a" value="$(arg init_yaw)"/>
      </include>

        <!-- ================================== -->
        <!-- =============== amcl ============= -->
        <!-- ================================== -->
<!--
        <node pkg="amcl" type="amcl" name="amcl">
-->
            
            <!-- Load default parameters for turtlebot -->
<!--
            <rosparam file="$(find ptdr)/params/amcl.yaml" command="load"/>
            <param name="initial_pose_x" value="$(arg init_x_pos)"/>
            <param name="initial_pose_y" value="$(arg init_y_pos)"/>
            <param name="initial_pose_a" value="$(arg init_yaw)"/>
            <param name="odom_frame_id" value="$(arg robot_namespace)/odom"/>
            <param name="base_frame_id" value="$(arg robot_namespace)/base_footprint"/>
-->

            <!-- Use the single map server -->
<!--
            <remap from="static_map" to="/static_map"/>
        </node>
-->

        <!-- ================================== -->
        <!-- ============ move_base =========== -->
        <!-- ================================== -->
<!--
        <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
-->
            <!-- Default configs form the TB3 repos -->
<!--
            <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
            <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="global_costmap"/>
            <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="local_costmap"/>
            <rosparam file="$(find turtlebot_navigation)/param/local_costmap_params.yaml" command="load"/>
            <rosparam file="$(find turtlebot_navigation)/param/global_costmap_params.yaml" command="load"/>
            <rosparam file="$(find turtlebot_navigation)/param/move_base_params.yaml" command="load"/>
            <rosparam file="$(find turtlebot_navigation)/param/dwa_local_planner_params.yaml" command="load"/>
-->

             <!-- Set tf_prefix for frames explicity, overwriting defaults -->


<!--
            <param name="global_costmap/scan/sensor_frame" value="$(arg robot_namespace)/base_scan"/>
            <param name="global_costmap/obstacle_layer/scan/sensor_frame" value="$(arg robot_namespace)/base_scan"/>
            <param name="global_costmap/global_frame" value="map"/>
            <param name="global_costmap/robot_base_frame" value="$(arg robot_namespace)/base_footprint"/>
            <param name="local_costmap/scan/sensor_frame" value="$(arg robot_namespace)/base_scan"/>
            <param name="local_costmap/obstacle_layer/scan/sensor_frame" value="$(arg robot_namespace)/base_scan"/>
            <param name="local_costmap/global_frame" value="$(arg robot_namespace)/odom"/>
            <param name="local_costmap/robot_base_frame" value="$(arg robot_namespace)/base_footprint"/>
-->

            <!-- Centralized map server -->
<!--
            <remap from="map" to="/map"/>

        </node>
-->

    </group>

</launch>